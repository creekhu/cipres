/*
 * DatasetRegistry.java
 */
package org.ngbw.sdk.api.data;


import java.util.Set;

import org.ngbw.sdk.api.core.CoreRegistryAware;
import org.ngbw.sdk.core.shared.SourceDocumentType;
import org.ngbw.sdk.core.types.DataType;
import org.ngbw.sdk.core.types.Dataset;
import org.ngbw.sdk.core.types.EntityType;
import org.ngbw.sdk.core.types.RecordType;


/**
 * 
 * @author R. Hannes Niedner
 *
 */
public interface DatasetRegistry extends CoreRegistryAware {

	/**
	 * @return datasetService
	 */
	public DatasetService getDatasetService();
	
	/**
	 * Return a set of all available Datasets.
	 * @return Set of Datasets
	 */
	public Set<Dataset> getDatasets();

	/**
	 * Method returns all Datasets with records of the submitted EntityType.
	 * 
	 * @param entityType
	 * @return Set of Datasets
	 */
	public Set<Dataset> getDatasets(EntityType entityType);

	/**
	 * Method returns all Datasets with records of the submitted DataType.
	 * 
	 * @param dataType
	 * @return Set of Datasets
	 */
	public Set<Dataset> getDatasets(DataType dataType);

	/**
	 * Method returns all Datasets with records of the submitted EntityType and DataType.
	 * 
	 * @param entityType
	 * @param dataType
	 * @return Set of Datasets
	 */
	public Set<Dataset> getDatasets(EntityType entityType, DataType dataType);
	
	/**
	 * Method returns the RecordType of the submitted Dataset.
	 * 
	 * @param dataset
	 * @return recordType
	 */
	public RecordType getRecordType(Dataset dataset);
	
	/**
	 * Determine and find the common RecordType for all Datasets
	 * in the set. If no common RecordType is found null is returned.
	 * 
	 * @param datasets
	 * @return recordType
	 */
	public RecordType getRecordType(Set<Dataset> datasets);
	
	/**
	 * Method returns the registered SourceDocumentType
	 * for the submitted dataset.
	 * 
	 * @param dataset
	 * @return sourceDocumentType
	 */
	public SourceDocumentType getSourceDocumentType(Dataset dataset);
	
	/**
	 * Method returns the registered EntityType for the records
	 * from the submitted dataset.
	 * 
	 * @param dataset
	 * @return entityType
	 */
	public EntityType getEntityType(Dataset dataset);
	
	/**
	 * Method returns the registered DataType for the records
	 * from the submitted dataset.
	 * 
	 * @param dataset
	 * @return dataType
	 */
	public DataType getDataType(Dataset dataset);
	
	/**
	 * Register DataResource class and its configuration file
	 * location together with a unique id for it. The registered
	 * information will be used to instantiate a
	 * DataResource that allows physical access to one or
	 * more Datasets as registered.
	 * 
	 * @param uniqueId
	 * @param className
	 * @param configFile
	 */
	public void registerDataResource(String uniqueId,
			Class<DataResource> className, String configFile);
	
	/**
	 * Method return a the implementation that provides the 
	 * physical access to the submitted dataset, via Queries for Example.
	 * 
	 * @param dataResourceId
	 * @return dataResource
	 */
	public DataResource getDataResource(String dataResourceId);
	
	/**
	 * Method return a the implementation that provides the 
	 * physical access to the submitted dataset, via Queries for Example.
	 * 
	 * @param dataset
	 * @return dataResource
	 */
	public DataResource getDataResource(Dataset dataset);
	
	/**
	 * The DatasetService implementation will work with the
	 * DatasetConfig implementation instances generated by 
	 * this method.
	 * The method either returns the existing DatasetConfig
	 * instance for the submitted Dataset or a new DatasetConfig
	 * instance if this Dataset was not registered before.
	 * 
	 * @param dataset 
	 * @return DatasetConfig implementation instance
	 */
	public DatasetConfig getDatasetConfig(Dataset dataset);

	/**
	 * Register a new DatasetConfig or update the checked out
	 * DatasetConfig instance
	 * 
	 * @param datasetConfig
	 */
	public void registerDataset(DatasetConfig datasetConfig);

	/**
	 * Method returns all RecordTypes that have at least one Dataset
	 * registered.
	 * 
	 * @return recordTypes
	 */
	public Set<RecordType> getSearchableRecordTypes();

	/**
	 * Method returns all EntityTypes that have at least one Dataset
	 * registered.
	 * 
	 * @return entityTypes
	 */
	public Set<EntityType> getSearchableEntityTypes();

	
	/**
	 * Method returns all DataTypes that have at least one Dataset
	 * registered.
	 * 
	 * @return dataTypes
	 */
	public Set<DataType> getSearchableDataTypes();

}
