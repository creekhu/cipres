/**
*/

package org.ngbw.sdk.tool;

import java.util.Properties;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class LonestarRSL extends CipresRSL
{
	@SuppressWarnings("unused")
	private static final Log m_log = LogFactory.getLog(LonestarRSL.class.getName());

	private static final int coresPerNode = 4;

	// max runtime in dev Q is 30 min.
	private static final String devQ = "development";
	private static final int devQRuntime = 30;

	// max runtime in normal Q is 48 hrs.
	private static final String normalQ = "normal";
	private static final int normalQRuntime = 2880;

	private static final int maxCores = 30 * coresPerNode;
	private static final int defaultCores = coresPerNode;


	public LonestarRSL(String commandline, String workingDir, String wrapper, String jobHandle, Properties schedulerConf, 
		String project)
	{
		super(commandline, workingDir, wrapper, jobHandle, schedulerConf, project);
	}

	public String getGT2String()
	{
		String rsl = getBasicGT2String();

		int RSLRunMinutes;
		int RSLMpiCount;
		int RSLNodeCount;
		int RSLThreadCount;
		String RSLQueue;

		// determine run time and queue
		RSLRunMinutes = runMinutes;
		if (RSLRunMinutes == 0)
		{
			RSLQueue = devQ;
			RSLRunMinutes = devQRuntime;
		} else
		{
			if (RSLRunMinutes > devQRuntime)
			{
				RSLQueue = normalQ;
				if (RSLRunMinutes > normalQRuntime)
				{
					RSLRunMinutes = normalQRuntime;
				}
			} else 
			{
				RSLQueue = devQ;
			}
		}

		rsl += 
			//"(maxTime = " +  RSLRunMinutes + ")\n" +
			"(maxWallTime = " +  RSLRunMinutes + ")\n" +
			"(queue = " + RSLQueue + ")\n" ;

		// determine job type
		if (jobType.equals(SINGLE))
		{
			rsl += "(jobType = " + SINGLE + ")\n" ;
			return rsl;
		} 


		// these will be zero if not specified in the pise xml
		RSLNodeCount = nodeCount;
		RSLThreadCount = threadCount;
		RSLMpiCount = mpiCount;

		/**
			RSL hostCount = number of nodes requested
			RSL count = total number of mpi processes (will be spread equally over the nodes)
			   note that this is different from the way rsl is interpreted on abe.
		*/

		/*
			Programs like mrbayes_abe.xml just specify the number of mpi processes they want,
			not the number of nodes, and they don't necessarily consider the number of cores/node
			and the fact that we're charged for the full node.  So we modify the number of
			mpi processes requested to be a multiple of cores_per_node, by rounding down.

			RSL host_count = number of nodes requested
			RSL xcount = number of mpi processes per node
		*/
		if (RSLThreadCount == 0 && RSLNodeCount == 0)
		{
			//Round down to a multiple of cores per node.
			RSLMpiCount = (RSLMpiCount / coresPerNode) * coresPerNode;

			//Make sure it's >= defaultCores and <= maxCores
			RSLMpiCount =  Math.min(Math.max(RSLMpiCount, defaultCores), maxCores);

			RSLNodeCount = RSLMpiCount / coresPerNode;
			rsl +=  
				"(jobType = mpi)\n" + 
				"(hostCount = " + RSLNodeCount + ")\n" +
				"(count = " +   RSLMpiCount + ")\n" ;
			return rsl;
		}

		/*
			Programs like hybrid raxml 7.2.5 specify nodeCount, threads per node and number of mpi
			processes.  We'll trust them to do it correctly and not adjust anything here, except for
			filling in defaults for unspecified parameters.
		*/
		RSLNodeCount = (RSLNodeCount == 0) ? 1 : RSLNodeCount;
		RSLThreadCount = (RSLThreadCount == 0) ? 1 : RSLThreadCount;
		rsl +=  
			"(jobType = mpi)\n" +
			"(hostCount = " + RSLNodeCount + ")\n" +
			"(count = " +   RSLMpiCount + ")\n" ;
		return rsl;

	}
}
