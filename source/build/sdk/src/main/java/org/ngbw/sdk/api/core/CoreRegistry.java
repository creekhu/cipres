/*
 * CoreRegistry.java
 */
package org.ngbw.sdk.api.core;


import java.util.Map;
import java.util.Set;

import org.ngbw.sdk.core.shared.SourceDocumentType;
import org.ngbw.sdk.core.types.DataFormat;
import org.ngbw.sdk.core.types.DataType;
import org.ngbw.sdk.core.types.EntityType;
import org.ngbw.sdk.core.types.FieldDataType;
import org.ngbw.sdk.core.types.RecordFieldType;
import org.ngbw.sdk.core.types.RecordType;


/**
 * The (central) CoreRegistry is the brains of the sdk. It allows access to the 
 * core logic and concepts of the workbench. The physical aspects such as
 * data access, tool and server configurations are managed by DatasetService and
 * ToolService. This CoreRegistry is meant to serve as portal to an externalized 
 * OWL ontology, but of course other implementation are possible and in fact 
 * shipped with the sdk (HashMap based DefaultRegistry). The core concepts are the following:
 * <ul>
 * <li>
 * 	EntityType - biosciences domain aspect used to capture "Bio" terminology like: Protein, DNA, etc. 
 * </li>
 * <li>
 * 	DataType - bioinformatics aspect used to capture terminology such as Structure, Sequence, Phylogenetic Tree, etc.
 * </li>
 * <li>
 * 	DataFormat - capture document structure as defined in the numerous (flatfile database and tool output)  file formats
 * </li>
 * <li>
 * 	RecordType - is a meta-concept that wraps records of the same origin (generated by the same tool or coming from the same Dataset)
 * 				 It types a DataRecord (and DataRecordCollection) defines which RecordFields can be extracted from the record
 * </li>
 * <li>
 * 	RecordField - defines a (domain recognized) fraction of the information in a DataRecord such as organism, name, creation date, etc.
 * </li>
 * <li>
 * 	FieldType - serves a sdk wrapper for all occurring java types such as String, Integer, Float, Double, Date.
 * </li>
 * </ul>
 * 
 * A Record from the Dataset "UNIPROT" for example (subject to change!) is characterized by EntityType "PROTEIN", DataType "SEQUENCE" and
 * DataFormats "SWISSPROT", "UNIPROT_XML". A UNIPROT DataRecord is of the RecordType "PROTEIN_SEQUENCE" and has the
 * following RecordFields, FieldTypes: 
 * <ul>
 * 	<li>RecordField.PRIMARY_ID, FieldType.STRING</li>
 *	<li>RecordField.ALTERNATIVE_ID, FieldType.STRING</li>
 * 	<li>RecordField.NAME, FieldType.STRING</li>
 * 	<li>RecordField.ORGANISM, FieldType.STRING</li>
 * 	<li>RecordField.VERSION, FieldType.STRING</li>
 * </ul>.
 * 
 * @author Roland H. Niedner
 * 
 */
public interface CoreRegistry {

	/**
	 * Method returns whether the child RecordType
	 * extends the parent RecordType.
	 * 
	 * @param child
	 * @param parent
	 * @return true if child extends parent
	 */
	public boolean isa(RecordType child, RecordType parent);

	/**
	 * Method returns whether the child EntityType
	 * extends the parent EntityType.
	 * 
	 * @param child
	 * @param parent
	 * @return true if child extends parent
	 */
	public boolean isa(EntityType child, EntityType parent);

	/**
	 * Method returns whether the child DataType
	 * extends the parent DataType.
	 * 
	 * @param child
	 * @param parent
	 * @return true if child extends parent
	 */
	public boolean isa(DataType child, DataType parent);
	
	/**
	 * Method returns whether the submitted recordType was 
	 * flagged abstract on registration.
	 * 
	 * @param recordType
	 * @return true if the submitted recordType was flagged abstract on registration
	 */
	public boolean isAbstract(RecordType recordType);

	/**
	 * Method returns all EntityTypes that are mapped to
	 * non abstract RecordTypes.
	 * 
	 * @return entityTypes
	 */
	public Set<EntityType> getEntityTypes();

	/**
	 * Method returns all registered EntityTypes.
	 * 
	 * @return entityTypes
	 */
	public Set<EntityType> getAllEntityTypes();

	/**
	 * Method returns EntityType registered for the
	 * submitted RecordType.
	 * 
	 * @param recordType
	 * @return entityType
	 */
	public EntityType getEntityType(RecordType recordType);

	/**
	 * Method returns all DataTypes that are mapped to
	 * non abstract RecordTypes.
	 * 
	 * @return dataTypes
	 */
	public Set<DataType> getDataTypes();

	/**
	 * Method returns all registered DataTypes.
	 * 
	 * @return dataTypes
	 */
	public Set<DataType> getAllDataTypes();

	/**
	 * Method returns the DataType registered for the
	 * submitted RecordType.
	 * 
	 * @param recordType
	 * @return dataType
	 */
	public DataType getDataType(RecordType recordType);

	/**
	 * Method returns all registered non-abstract RecordTypes.
	 * 
	 * @return Set of RecordTypes
	 */
	public Set<RecordType> getRecordTypes();

	/**
	 * Method returns all registered RecordTypes.
	 * 
	 * @return Set of RecordTypes
	 */
	public Set<RecordType> getAllRecordTypes();

	/**
	 * @param dataType
	 * @return recordTypes
	 */
	public Set<RecordType> getRecordTypes(DataType dataType);

	/**
	 * Method returns the registered RecordTypes for the submitted EntityType.
	 * 
	 * @param entityType
	 * @return recordTypes
	 */
	public Set<RecordType> getRecordTypes(EntityType entityType);

	/**
	 * Method returns all RecordTypes for the submitted EntityType and DataType.
	 * 
	 * @param entityType
	 * @param dataType
	 * @return recordType
	 */
	public RecordType getRecordType(EntityType entityType, DataType dataType);

	/**
	 * Method returns the RecordFields for the submitted RecordType.
	 * 
	 * @param recordType
	 * @return List of RecordFields
	 */
	public Set<RecordFieldType> getRecordFields(RecordType recordType);
	
	/**
	 * Method returns the FieldType for the submitted RecordField.
	 * 
	 * @param field
	 * @return FieldType
	 */
	public FieldDataType getFieldType(RecordFieldType field);
	
	/**
	 * Register a RecordType and all dependent Data.
	 * The record is treated NOT abstract and
	 * as NOT extending another RecordType.
	 * 
	 * @param recordType
	 * @param fields
	 * @param entityType
	 * @param dataType
	 */
	public void registerRecordType(RecordType recordType, EntityType entityType, DataType dataType, Set<RecordFieldType> fields);
	
	/**
	 * Register a RecordType and all dependent Data.
	 * The record is treated NOT abstract.
	 * 
	 * @param recordType
	 * @param entityType
	 * @param dataType
	 * @param fields
	 * @param extendedRecordType
	 */
	public void registerRecordType(RecordType recordType,
			EntityType entityType, DataType dataType, Set<RecordFieldType> fields, 
			RecordType extendedRecordType);
	
	/**
	 * Register a RecordType and all dependent Data.
	 * The record is treated as NOT extending another RecordType.
	 * 
	 * @param recordType
	 * @param entityType
	 * @param dataType
	 * @param fields
	 * @param isAbstract
	 */
	public void registerRecordType(RecordType recordType,
			EntityType entityType, DataType dataType, Set<RecordFieldType> fields, 
			boolean isAbstract);
	
	/**
	 * Register a RecordType and all dependent Data.
	 * 
	 * @param recordType
	 * @param entityType
	 * @param dataType
	 * @param fields
	 * @param isAbstract
	 * @param extendedRecordType
	 */
	public void registerRecordType(RecordType recordType,
			EntityType entityType, DataType dataType, Set<RecordFieldType> fields, 
			boolean isAbstract, RecordType extendedRecordType);
	
	/**
	 * Register the FieldType for a RecordField;
	 * @param field
	 * @param type
	 */
	public void registerRecordField(RecordFieldType field, FieldDataType type);
	
	/**
	 * Register the FieldType for multiple RecordFields;
	 * @param fieldTypeMap
	 */
	public void registerRecordFields(Map<RecordFieldType, FieldDataType> fieldTypeMap);
	
	/**
	 * Method returns whether there is a SourceDocumentTransformer registered
	 * for the submitted SourceDocumentType and the target RecordType.
	 * 
	 * @param sourceDocumentType
	 * @param targetType 
	 * @return hasTransformerClass
	 */
	public boolean hasTransformerClass(SourceDocumentType sourceDocumentType, RecordType targetType);
	
	/**
	 * Return the SourceDocumentTransformer class for the
	 * submitted SourceDocument and the target RecordType.
	 * 
	 * @param sourceDocumentType
	 * @param targetType 
	 * @return transformerClass
	 */
	public Class<SourceDocumentTransformer> getTransformerClass(SourceDocumentType sourceDocumentType, RecordType targetType);
	
	/**
	 * Register the SourceDocumentTransformer Class for the 
	 * submitted source RecordType and DataFormat and the target
	 * RecordType.
	 * 
	 * @param recordType
	 * @param dataFormat
	 * @param targetType 
	 * @param transformerClass
	 */
	public void registerTransformerClass(RecordType recordType, DataFormat dataFormat, 
			RecordType targetType, Class<SourceDocumentTransformer> transformerClass);
	
	/**
	 * Register the SourceDocumentTransformer Class for the 
	 * submitted SourceDocumentType.
	 * 
	 * @param sourceDocumentType
	 * @param targetType 
	 * @param transformerClass
	 */
	public void registerTransformerClass(SourceDocumentType sourceDocumentType, 
			RecordType targetType, Class<SourceDocumentTransformer> transformerClass);

	
	/**
	 * Method returns the set of RecordTypes that a SourceDocuemnt of the submitted
	 * type can be transformed into.
	 *  
	 * @param type
	 * @return targetTypes
	 */
	public Set<RecordType> getTransformationTargetRecordTypes(
			SourceDocumentType type);
}