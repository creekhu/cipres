<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE pise SYSTEM "PARSER/pise.dtd" [
<!ENTITY emboss_init SYSTEM "XMLDIR/emboss.xml">
]>

<pise>

<head>
<title>REMAP</title>
<description>Display a sequence with restriction cut sites, translation etc.. (EMBOSS)</description>
<category>display</category>
<category>nucleic:restriction</category>
<category>nucleic:translation</category>
<doclink>http://bioweb.pasteur.fr/docs/EMBOSS/remap.html</doclink>
</head>

<command>remap</command>

<parameters>

&emboss_init;


<parameter type="Paragraph">
<paragraph>
<name>input</name>
	<prompt>Input section</prompt>

<parameters>
	<parameter type="Sequence" ismandatory="1" issimple="1" ishidden="0">
	<name>sequence</name>
	<attributes>
		<prompt>sequence -- DNA [sequences] (-sequence)</prompt>
		<format>
			<language>perl</language>
			<code>" -sequence=$value -sformat=fasta"</code>
		</format>
		<group>1</group>
		<seqtype><value>dna</value></seqtype>
		<seqfmt>
			<value>8</value>
		</seqfmt>
		<pipe>
			<pipetype>seqsfile</pipetype>
				<language>perl</language>
				<code>1</code>
		</pipe>
	</attributes>
	</parameter>

	</parameters>
</paragraph>
</parameter>


<parameter type="Paragraph">
<paragraph>
<name>required</name>
	<prompt>Required section</prompt>

<parameters>
	<parameter type="String" ismandatory="1" issimple="1" ishidden="0">
	<name>enzymes</name>
	<attributes>
		<prompt>Comma separated enzyme list (-enzymes)</prompt>
		<vdef>
			<value>all</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>" -enzymes=$value"</code>
		</format>
		<group>2</group>
		<comment>
			<value>The name 'all' reads in all enzyme names from the REBASE database. You can specify enzymes by giving their names with commas between then, such as: 'HincII,hinfI,ppiI,hindiii'. &lt;BR&gt; The case of the names is not important. You can specify a file of enzyme names to read in by giving the name of the file holding the enzyme names with a '\@' character in front of it, for example, '\@enz.list'. &lt;BR&gt; Blank lines and lines starting with a hash character or '!' are ignored and all other lines are concatenated together with a comma character ',' and then treated as the list of enzymes to search for. &lt;BR&gt; An example of a file of enzyme names is: &lt;BR&gt; ! my enzymes &lt;BR&gt; HincII, ppiII &lt;BR&gt; ! other enzymes &lt;BR&gt; hindiii &lt;BR&gt; HinfI &lt;BR&gt; PpiI</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Integer" ismandatory="1" issimple="1" ishidden="0">
	<name>sitelen</name>
	<attributes>
		<prompt>Minimum recognition site length (-sitelen)</prompt>
		<vdef>
			<value>4</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>" -sitelen=$value"</code>
		</format>
		<group>3</group>
		<comment>
			<value>This sets the minimum length of the restriction enzyme recognition site. Any enzymes with sites shorter than this will be ignored.</value>
		</comment>
		<scalemin><value>2</value></scalemin>
		<scalemax><value>20</value></scalemax>
	</attributes>
	</parameter>

	</parameters>
</paragraph>
</parameter>


<parameter type="Paragraph">
<paragraph>
<name>advanced</name>
	<prompt>Advanced section</prompt>

<parameters>
	<parameter type="Integer" ismandatory="0" issimple="0" ishidden="0">
	<name>mincuts</name>
	<attributes>
		<prompt>Minimum cuts per RE (-mincuts)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>(defined $value &amp;&amp; $value != $vdef)? " -mincuts=$value" : ""</code>
		</format>
		<group>4</group>
		<comment>
			<value>This sets the minimum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut fewer times than this will be ignored.</value>
		</comment>
		<scalemin><value>1</value></scalemin>
		<scalemax><value>1000</value></scalemax>
	</attributes>
	</parameter>

	<parameter type="Integer" ismandatory="0" issimple="0" ishidden="0">
	<name>maxcuts</name>
	<attributes>
		<prompt>Maximum cuts per RE (-maxcuts)</prompt>
		<vdef>
			<value>2000000000</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>(defined $value &amp;&amp; $value != $vdef)? " -maxcuts=$value" : ""</code>
		</format>
		<group>5</group>
		<comment>
			<value>This sets the maximum number of cuts for any restriction enzyme that will be considered. Any enzymes that cut more times than this will be ignored.</value>
		</comment>
		<scalemin>
			<language>acd</language>
			<code>$mincuts</code>
		</scalemin>
		<scalemax><value>2000000000</value></scalemax>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>single</name>
	<attributes>
		<prompt>Force single site only cuts (-single)</prompt>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? " -single" : ""</code>
		</format>
		<group>6</group>
		<comment>
			<value>If this is set then this forces the values of the mincuts and maxcuts qualifiers to both be 1. Any other value you may have set them to will be ignored.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>blunt</name>
	<attributes>
		<prompt>Allow blunt end cutters (-blunt)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -noblunt"</code>
		</format>
		<group>7</group>
		<comment>
			<value>This allows those enzymes which cut at the same position on the forward and reverse strands to be considered.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>sticky</name>
	<attributes>
		<prompt>Allow sticky end cutters (-sticky)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -nosticky"</code>
		</format>
		<group>8</group>
		<comment>
			<value>This allows those enzymes which cut at different positions on the forward and reverse strands, leaving an overhang, to be considered.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>ambiguity</name>
	<attributes>
		<prompt>Allow ambiguous matches (-ambiguity)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -noambiguity"</code>
		</format>
		<group>9</group>
		<comment>
			<value>This allows those enzymes which have one or more 'N' ambiguity codes in their pattern to be considered</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>plasmid</name>
	<attributes>
		<prompt>Allow circular DNA (-plasmid)</prompt>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? " -plasmid" : ""</code>
		</format>
		<group>10</group>
		<comment>
			<value>If this is set then this allows searches for restriction enzyme recognition site and cut postions that span the end of the sequence to be considered.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>commercial</name>
	<attributes>
		<prompt>Only enzymes with suppliers (-commercial)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -nocommercial"</code>
		</format>
		<group>11</group>
		<comment>
			<value>If this is set, then only those enzymes with a commercial supplier will be searched for. This qualifier is ignored if you have specified an explicit list of enzymes to search for, rather than searching through 'all' the enzymes in the REBASE database. It is assumed that, if you are asking for an explicit enzyme, then you probably know where to get it from and so all enzymes names that you have asked to be searched for, and which cut, will be reported whether or not they have a commercial supplier.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Excl" ismandatory="1" issimple="1" ishidden="0">
	<name>table</name>
	<attributes>
		<prompt>Genetic code to use -- Genetic codes (-table)</prompt>
			<vlist>
				<value>0</value>
				<label>Standard</label>
				<value>1</value>
				<label>Standard (with alternative initiation codons)</label>
				<value>2</value>
				<label>Vertebrate Mitochondrial</label>
				<value>3</value>
				<label>Yeast Mitochondrial</label>
				<value>4</value>
				<label>Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma</label>
				<value>5</value>
				<label>Invertebrate Mitochondrial</label>
				<value>6</value>
				<label>Ciliate Macronuclear and Dasycladacean</label>
				<value>9</value>
				<label>Echinoderm Mitochondrial</label>
				<value>10</value>
				<label>Euplotid Nuclear</label>
				<value>11</value>
				<label>Bacterial</label>
				<value>12</value>
				<label>Alternative Yeast Nuclear</label>
				<value>13</value>
				<label>Ascidian Mitochondrial</label>
				<value>14</value>
				<label>Flatworm Mitochondrial</label>
				<value>15</value>
				<label>Blepharisma Macronuclear</label>
				<value>16</value>
				<label>Chlorophycean Mitochondrial</label>
				<value>21</value>
				<label>Trematode Mitochondrial</label>
				<value>22</value>
				<label>Scenedesmus obliquus</label>
				<value>23</value>
				<label>Thraustochytrium Mitochondrial</label>
			</vlist>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>" -table=$value"</code>
		</format>
		<group>12</group>
	</attributes>
	</parameter>

	</parameters>
</paragraph>
</parameter>


<parameter type="Paragraph">
<paragraph>
<name>output</name>
	<prompt>Output section</prompt>

<parameters>
	<parameter type="OutFile" ismandatory="1" issimple="1" ishidden="0">
	<name>outfile</name>
	<attributes>
		<prompt>outfile (-outfile)</prompt>
		<vdef><value>outfile.out</value></vdef>
		<format>
			<language>perl</language>
			<code>" -outfile=$value"</code>
		</format>
		<group>13</group>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>cutlist</name>
	<attributes>
		<prompt>List the enzymes that cut (-cutlist)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -nocutlist"</code>
		</format>
		<group>14</group>
		<comment>
			<value>This produces lists in the output of the enzymes that cut, those that cut but are excluded because that cut fewer times than mincut or more times than maxcut and those enzymes that do not cut.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>flatreformat</name>
	<attributes>
		<prompt>Display RE sites in flat format (-flatreformat)</prompt>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? " -flatreformat" : ""</code>
		</format>
		<group>15</group>
		<comment>
			<value>This changes the output format to one where the recognition site is indicated by a row of '===' characters and the cut site is pointed to by a '&gt;' character in the forward sense, or a '&lt;' in the reverse sense strand.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>limit</name>
	<attributes>
		<prompt>Limits reports to one isoschizomer (-limit)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -nolimit"</code>
		</format>
		<group>16</group>
		<comment>
			<value>This limits the reporting of enzymes to just one enzyme from each group of isoschizomers. The enzyme chosen to represent an isoschizomer group is the prototype indicated in the data file 'embossre.equ', which is created by the program 'rebaseextract'. If you prefer different prototypes to be used, make a copy of embossre.equ in your home directory and edit it. If this value is set to be false then all of the input enzymes will be reported. You might like to set this to false if you are supplying an explicit set of enzymes rather than searching 'all' of them.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>translation</name>
	<attributes>
		<prompt>Display translation (-translation)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -notranslation"</code>
		</format>
		<group>17</group>
		<comment>
			<value>This displays the 6-frame translations of the sequence in the output.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>reverse</name>
	<attributes>
		<prompt>Display cut sites and translation of reverse sense (-reverse)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -noreverse"</code>
		</format>
		<group>18</group>
		<comment>
			<value>This displays the cut sites and translation of the reverse sense.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Integer" ismandatory="0" issimple="0" ishidden="0">
	<name>orfminsize</name>
	<attributes>
		<prompt>Minimum size of ORFs (-orfminsize)</prompt>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>(defined $value &amp;&amp; $value != $vdef)? " -orfminsize=$value" : ""</code>
		</format>
		<group>19</group>
		<comment>
			<value>This sets the minimum size of Open Reading Frames (ORFs) to display in the translations. All other translation regions are masked by changing the amino acids to '-' characters.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Integer" ismandatory="0" issimple="0" ishidden="0">
	<name>uppercase</name>
	<attributes>
		<prompt>Regions to put in uppercase (eg: 4-57,78-94) (-uppercase)</prompt>
		<format>
			<language>perl</language>
			<code>($value)? " -uppercase=$value" : ""</code>
		</format>
		<group>20</group>
		<comment>
			<value>Regions to put in uppercase. &lt;BR&gt; If this is left blank, then the sequence case is left alone. &lt;BR&gt; A set of regions is specified by a set of pairs of positions. &lt;BR&gt; The positions are integers. &lt;BR&gt; They are separated by any non-digit, non-alpha character. &lt;BR&gt; Examples of region specifications are: &lt;BR&gt; 24-45, 56-78 &lt;BR&gt; 1:45, 67=99;765..888 &lt;BR&gt; 1,5,8,10,23,45,57,99</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Integer" ismandatory="0" issimple="0" ishidden="0">
	<name>highlight</name>
	<attributes>
		<prompt>Regions to colour in HTML (eg: 4-57 red 78-94 green) (-highlight)</prompt>
		<format>
			<language>perl</language>
			<code>($value)? " -highlight=$value" : ""</code>
		</format>
		<group>21</group>
		<comment>
			<value>Regions to colour if formatting for HTML. &lt;BR&gt; If this is left blank, then the sequence is left alone. &lt;BR&gt; A set of regions is specified by a set of pairs of positions. &lt;BR&gt; The positions are integers. &lt;BR&gt; They are followed by any valid HTML font colour. &lt;BR&gt; Examples of region specifications are: &lt;BR&gt; 24-45 blue 56-78 orange &lt;BR&gt; 1-100 green 120-156 red &lt;BR&gt; A file of ranges to colour (one range per line) can be specifed as '\@filename'.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>threeletter</name>
	<attributes>
		<prompt>Display protein sequences in three-letter code (-threeletter)</prompt>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? " -threeletter" : ""</code>
		</format>
		<group>22</group>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>number</name>
	<attributes>
		<prompt>Number the sequences (-number)</prompt>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? " -number" : ""</code>
		</format>
		<group>23</group>
	</attributes>
	</parameter>

	<parameter type="Integer" ismandatory="0" issimple="0" ishidden="0">
	<name>width</name>
	<attributes>
		<prompt>Width of sequence to display (-width)</prompt>
		<vdef>
			<value>60</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>(defined $value &amp;&amp; $value != $vdef)? " -width=$value" : ""</code>
		</format>
		<group>24</group>
		<scalemin><value>1</value></scalemin>
	</attributes>
	</parameter>

	<parameter type="Integer" ismandatory="0" issimple="0" ishidden="0">
	<name>length</name>
	<attributes>
		<prompt>Line length of page (0 for indefinite) (-length)</prompt>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>(defined $value &amp;&amp; $value != $vdef)? " -length=$value" : ""</code>
		</format>
		<group>25</group>
	</attributes>
	</parameter>

	<parameter type="Integer" ismandatory="0" issimple="0" ishidden="0">
	<name>margin</name>
	<attributes>
		<prompt>Margin around sequence for numbering (-margin)</prompt>
		<vdef>
			<value>10</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>(defined $value &amp;&amp; $value != $vdef)? " -margin=$value" : ""</code>
		</format>
		<group>26</group>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>name</name>
	<attributes>
		<prompt>Display sequence ID (-name)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -noname"</code>
		</format>
		<group>27</group>
		<comment>
			<value>Set this to be false if you do not wish to display the ID name of the sequence</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>description</name>
	<attributes>
		<prompt>Display description (-description)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? "" : " -nodescription"</code>
		</format>
		<group>28</group>
		<comment>
			<value>Set this to be false if you do not wish to display the description of the sequence</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Integer" ismandatory="0" issimple="0" ishidden="0">
	<name>offset</name>
	<attributes>
		<prompt>Offset to start numbering the sequence from (-offset)</prompt>
		<vdef>
			<value>1</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>(defined $value &amp;&amp; $value != $vdef)? " -offset=$value" : ""</code>
		</format>
		<group>29</group>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>html</name>
	<attributes>
		<prompt>Use HTML formatting (-html)</prompt>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? " -html" : ""</code>
		</format>
		<group>30</group>
	</attributes>
	</parameter>

	</parameters>
</paragraph>
</parameter>

<parameter type="String" ishidden="1">
<name>auto</name>
<attributes>
	<format>
		<language>perl</language>
		<code>" -auto -stdout"</code>
	</format>
	<group>31</group>
</attributes>
</parameter>

</parameters>
</pise>
