/*
 * LocalProcessWorker.java
 */
package org.ngbw.sdk.tool;


import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.concurrent.Future;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.ngbw.sdk.api.tool.FileHandler;
import org.ngbw.sdk.common.util.InputStreamCollector;


/**
 * LocalProcessWorker
 *
 * @author Roland H. Niedner
 * @author Paul Hoover
 *
 */
public class LocalProcessWorker extends BaseProcessWorker {

	private static final Log m_log = LogFactory.getLog(LocalProcessWorker.class.getName());


	public static void main(String args[])
	{
		try {
			(new LocalProcessWorker()).execute();
		}
		catch (Throwable thrown) {
			m_log.error("", thrown);

			System.exit(-1);
		}
	}

	private LocalProcessWorker() throws PropertyException, IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, Exception
	{
		super();
	}

	protected void executeImpl() throws
		IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException
	{
		try {
			Process jobRunner = Runtime.getRuntime().exec(m_commandLine, null, new File(m_workingDir));
			Future<String> stdOut = InputStreamCollector.readInputStream(jobRunner.getInputStream());
			Future<String> stdErr = InputStreamCollector.readInputStream(jobRunner.getErrorStream());
			int exitCode = jobRunner.waitFor();

			storeTaskResults(stdOut.get(), stdErr.get(), exitCode, new LocalFileHandler());
		}
		catch (Throwable thrown) {
			storeTaskFailure(null, thrown, new LocalFileHandler());
		}
	}

	protected FileHandler getFileHandler() throws Exception
	{
		return new LocalFileHandler();
	}

}
