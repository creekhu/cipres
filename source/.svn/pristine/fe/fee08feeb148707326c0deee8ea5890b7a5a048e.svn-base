<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE pise SYSTEM "PARSER/pise.dtd" [
<!ENTITY emboss_init SYSTEM "XMLDIR/emboss.xml">
]>

<pise>

<head>
<title>MASKFEAT</title>
<description>Mask off features of a sequence. (EMBOSS)</description>
<category>edit</category>
<category>feature tables</category>
<doclink>http://bioweb.pasteur.fr/docs/EMBOSS/maskfeat.html</doclink>
</head>

<command>maskfeat</command>

<parameters>

&emboss_init;


<parameter type="Paragraph">
<paragraph>
<name>input</name>
	<prompt>Input section</prompt>

<parameters>
	<parameter type="Sequence" ismandatory="1" issimple="1" ishidden="0">
	<name>sequence</name>
	<attributes>
		<prompt>sequence -- any [sequences] (-sequence)</prompt>
		<format>
			<language>perl</language>
			<code>" -sequence=$value"</code>
		</format>
		<group>1</group>
		<seqtype><value>any</value></seqtype>
		<seqfmt>
			<value>2</value>
			<value>4</value>
			<value>14</value>
		</seqfmt>
		<pipe>
			<pipetype>seqsfile</pipetype>
				<language>perl</language>
				<code>1</code>
		</pipe>
	</attributes>
	</parameter>

	</parameters>
</paragraph>
</parameter>


<parameter type="Paragraph">
<paragraph>
<name>advanced</name>
	<prompt>Advanced section</prompt>

<parameters>
	<parameter type="String" ismandatory="0" issimple="0" ishidden="0">
	<name>type</name>
	<attributes>
		<prompt>Type of feature to mask (-type)</prompt>
		<vdef>
			<value>repeat</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value &amp;&amp; ($value ne $vdef || ($value .= "*")))? " -type=$value" : ""</code>
		</format>
		<group>2</group>
		<comment>
			<value>By default any feature in the feature table with a type starting 'repeat' is masked. You can set this to be any feature type you wish to mask. &lt;BR&gt; See http://www3.ebi.ac.uk/Services/WebFeat/ for a list of the EMBL feature types and see Appendix A of the Swissprot user manual in http://www.expasy.ch/txt/userman.txt for a list of the Swissprot feature types. &lt;BR&gt; The type may be wildcarded by using '*'. &lt;BR&gt; If you wish to mask more than one type, separate their names with spaces or commas, eg: &lt;BR&gt; *UTR repeat*</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="Switch" ismandatory="0" issimple="0" ishidden="0">
	<name>tolower</name>
	<attributes>
		<prompt>Change masked region to lower-case (-tolower)</prompt>
		<vdef>
			<value>0</value>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value)? " -tolower" : ""</code>
		</format>
		<group>3</group>
		<comment>
			<value>The region can be 'masked' by converting the sequence characters to lower-case, some non-EMBOSS programs e.g. fasta can interpret this as a masked region. The sequence is unchanged apart from the case change. You might like to ensure that the whole sequence is in upper-case before masking the specified regions to lower-case by using the '-supper' flag.</value>
		</comment>
	</attributes>
	</parameter>

	<parameter type="String" ismandatory="0" issimple="0" ishidden="0">
	<name>maskchar</name>
	<attributes>
		<prompt>Character to mask with (-maskchar)</prompt>
		<vdef>
			<language>acd</language>
			<code>@($(acdprotein)?X:N)</code>
		</vdef>
		<format>
			<language>perl</language>
			<code>($value &amp;&amp; $value ne $vdef)? " -maskchar=$value" : ""</code>
		</format>
		<group>4</group>
		<comment>
			<value>Character to use when masking. &lt;BR&gt; Default is 'X' for protein sequences, 'N' for nucleic sequences. &lt;BR&gt; If the mask character is set to be the SPACE character or a null character, then the sequence is 'masked' by changing it to lower-case, just as with the '-lowercase' flag.</value>
		</comment>
	</attributes>
	</parameter>

	</parameters>
</paragraph>
</parameter>


<parameter type="Paragraph">
<paragraph>
<name>output</name>
	<prompt>Output section</prompt>

<parameters>
	<parameter type="OutFile" ismandatory="1" issimple="1" ishidden="0">
	<name>outseq</name>
	<attributes>
		<prompt>outseq (-outseq)</prompt>
		<vdef><value>outseq.out</value></vdef>
		<format>
			<language>perl</language>
			<code>" -outseq=$value"</code>
		</format>
		<group>5</group>
		<pipe>
			<pipetype>seqfile</pipetype>
				<language>perl</language>
				<code>1</code>
		</pipe>
	</attributes>
	</parameter>

	<parameter type="Excl" issimple="1">
	<name>outseq_sformat</name>
	<attributes>
		<prompt>Output format for: outseq</prompt>
		<vlist>
			<value>fasta</value>
			<label>fasta</label>
			<value>gcg</value>
			<label>gcg</label>
			<value>phylip</value>
			<label>phylip</label>
			<value>embl</value>
			<label>embl</label>
			<value>swiss</value>
			<label>swiss</label>
			<value>ncbi</value>
			<label>ncbi</label>
			<value>nbrf</value>
			<label>nbrf</label>
			<value>genbank</value>
			<label>genbank</label>
			<value>ig</value>
			<label>ig</label>
			<value>codata</value>
			<label>codata</label>
			<value>strider</value>
			<label>strider</label>
			<value>acedb</value>
			<label>acedb</label>
			<value>staden</value>
			<label>staden</label>
			<value>text</value>
			<label>text</label>
			<value>fitch</value>
			<label>fitch</label>
			<value>msf</value>
			<label>msf</label>
			<value>clustal</value>
			<label>clustal</label>
			<value>phylip</value>
			<label>phylip</label>
			<value>phylip3</value>
			<label>phylip3</label>
			<value>asn1</value>
			<label>asn1</label>
		</vlist>
		<vdef><value>fasta</value></vdef>
		<format>
			<language>perl</language>
			<code>" -osformat=$value"</code>
		</format>
		<group>6</group>
	</attributes>
	</parameter>
	</parameters>
</paragraph>
</parameter>

<parameter type="String" ishidden="1">
<name>auto</name>
<attributes>
	<format>
		<language>perl</language>
		<code>" -auto -stdout"</code>
	</format>
	<group>7</group>
</attributes>
</parameter>

</parameters>
</pise>
